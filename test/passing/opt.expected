module Shape :
  sig
    type t
    type opt
    val opt : ?width:int -> ?height:int -> ?two_d:bool -> unit -> opt
    val create : ?opt:opt -> string -> t
  end =
  struct
    type t = Jv.t
    type opt_internal =
      {
      width: int option ;
      height: int option ;
      two_d: bool option }[@@deriving brr_opt]
    include
      struct
        let opt_internal_to_jv ?width  ?height  ?two_d  () =
          let jv = Jv.obj [||] in
          ((function | None -> () | Some two_d -> Jv.Bool.set jv "twoD" two_d))
            two_d;
          ((function
            | None -> ()
            | Some height -> Jv.Int.set jv "height" height)) height;
          ((function | None -> () | Some width -> Jv.Int.set jv "width" width))
            width;
          jv
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    type opt = Jv.t
    let opt = opt_internal_to_jv
    let create ?(opt= Jv.undefined)  s =
      Jv.new' (Jv.obj [||]) [|(Jv.of_string s);opt|]
  end 
